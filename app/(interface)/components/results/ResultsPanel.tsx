"use client";

import { useCallback, useMemo, useRef, useState } from "react";
import {
  AlertCircle,
  FileDown,
  FileImage,
  Film,
  X,
} from "lucide-react";

import { Button } from "../ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "../ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "../ui/table";
import { cn } from "../ui/utils";

interface ResultsPanelProps {
  className?: string;
  onClose?: () => void;
}

interface OptimizationRow {
  label: string;
  value: string;
}

interface OptimizationResultPoint {
  layer: number;
  deposition: number;
  temperature: number;
}

const OPTIMIZATION_ROWS: OptimizationRow[] = [
  { label: "Material", value: "Carbon-fiber reinforced PA" },
  { label: "Layer height", value: "0.2 mm" },
  { label: "Nozzle speed", value: "120 mm/s" },
  { label: "Cooling fan", value: "45%" },
  { label: "Shells", value: "3" },
  { label: "Infill pattern", value: "Gyroid 45%" },
];

const OPTIMIZATION_RESULTS: OptimizationResultPoint[] = [
  { layer: 0, deposition: 10, temperature: 200 },
  { layer: 1, deposition: 11.8, temperature: 206 },
  { layer: 2, deposition: 12.6, temperature: 210 },
  { layer: 3, deposition: 13.4, temperature: 214 },
  { layer: 4, deposition: 14.1, temperature: 218 },
  { layer: 5, deposition: 14.4, temperature: 220 },
  { layer: 6, deposition: 14.2, temperature: 219 },
  { layer: 7, deposition: 13.7, temperature: 216 },
  { layer: 8, deposition: 13.2, temperature: 213 },
];

const GCODE_PAYLOAD = `; Generated by Optimization Studio\nG21 ; set units to millimeters\nG90 ; absolute positioning\nM82 ; set extruder to absolute mode\nM104 S220 ; set extruder temp\nM140 S60 ; set bed temp\nG28 ; home all axes\nG1 Z0.2 F1200\n; ...\n`; // Placeholder content to demonstrate download flow

const GRAPH_COLORS = {
  deposition: "#2563eb",
  temperature: "#f97316",
} as const;

const GRAPH_DIMENSIONS = {
  width: 720,
  height: 320,
  padding: { top: 24, right: 32, bottom: 48, left: 52 },
};

const buildPolyline = (
  data: OptimizationResultPoint[],
  key: "deposition" | "temperature",
) => {
  const { width, height, padding } = GRAPH_DIMENSIONS;
  const values = data.map(point => point[key]);
  const maxValue = Math.max(...values);
  const minValue = Math.min(...values);
  const span = maxValue - minValue || 1;
  const innerWidth = width - padding.left - padding.right;
  const innerHeight = height - padding.top - padding.bottom;

  return data
    .map((point, index) => {
      const x =
        padding.left +
        (innerWidth * index) / Math.max(1, data.length - 1);
      const normalised = (point[key] - minValue) / span;
      const y = padding.top + innerHeight * (1 - normalised);
      return `${x.toFixed(2)},${y.toFixed(2)}`;
    })
    .join(" ");
};

const buildAreaPolygon = (
  data: OptimizationResultPoint[],
  key: "deposition" | "temperature",
  linePoints?: string,
) => {
  const { width, height, padding } = GRAPH_DIMENSIONS;
  const polyline = linePoints ?? buildPolyline(data, key);
  const innerWidth = width - padding.left - padding.right;
  const baseY = height - padding.bottom;
  const firstX = padding.left.toFixed(2);
  const lastX = (padding.left + innerWidth).toFixed(2);

  return `${polyline} ${lastX},${baseY.toFixed(2)} ${firstX},${baseY.toFixed(2)}`;
};

const formatAxisLabel = (value: number) => value.toFixed(0);

const downloadDataUrl = (dataUrl: string, filename: string) => {
  const anchor = document.createElement("a");
  anchor.href = dataUrl;
  anchor.download = filename;
  document.body.appendChild(anchor);
  anchor.click();
  document.body.removeChild(anchor);
};

const encodeSvgDataUrl = (svg: SVGSVGElement) => {
  const clone = svg.cloneNode(true) as SVGSVGElement;
  clone.setAttribute("xmlns", "http://www.w3.org/2000/svg");
  const svgMarkup = new XMLSerializer().serializeToString(clone);
  const encoded = window.btoa(unescape(encodeURIComponent(svgMarkup)));
  return `data:image/svg+xml;base64,${encoded}`;
};

const exportSvgAsImage = async (
  svg: SVGSVGElement,
  format: "png" | "gif",
) => {
  const { width, height } = GRAPH_DIMENSIONS;
  const canvas = document.createElement("canvas");
  canvas.width = width;
  canvas.height = height;
  const context = canvas.getContext("2d");
  if (!context) {
    throw new Error("Canvas context is not available");
  }

  const dataUrl = encodeSvgDataUrl(svg);

  const image = new Image();
  image.crossOrigin = "anonymous";

  await new Promise<void>((resolve, reject) => {
    image.onload = () => resolve();
    image.onerror = () => reject(new Error("Failed to load graph for export"));
    image.src = dataUrl;
  });

  context.clearRect(0, 0, canvas.width, canvas.height);
  context.drawImage(image, 0, 0, canvas.width, canvas.height);

  const mime = format === "png" ? "image/png" : "image/gif";
  const exportedUrl = canvas.toDataURL(mime);

  if (format === "gif" && !exportedUrl.startsWith("data:image/gif")) {
    throw new Error("GIF export is not supported by this browser");
  }

  return exportedUrl;
};

export function ResultsPanel({ className, onClose }: ResultsPanelProps) {
  const [downloadingFormat, setDownloadingFormat] = useState<"png" | "gif" | null>(
    null,
  );
  const [downloadError, setDownloadError] = useState<string | null>(null);
  const svgRef = useRef<SVGSVGElement | null>(null);

  const { depositionPath, depositionArea, temperaturePath, temperatureArea } =
    useMemo(() => {
      const depositionLine = buildPolyline(OPTIMIZATION_RESULTS, "deposition");
      const temperatureLine = buildPolyline(OPTIMIZATION_RESULTS, "temperature");

      return {
        depositionPath: depositionLine,
        depositionArea: buildAreaPolygon(
          OPTIMIZATION_RESULTS,
          "deposition",
          depositionLine,
        ),
        temperaturePath: temperatureLine,
        temperatureArea: buildAreaPolygon(
          OPTIMIZATION_RESULTS,
          "temperature",
          temperatureLine,
        ),
      };
    }, []);

  const axisTicks = useMemo(() => {
    const values = OPTIMIZATION_RESULTS.flatMap(point => [
      point.deposition,
      point.temperature,
    ]);
    const maxValue = Math.ceil(Math.max(...values) / 5) * 5;
    const minValue = Math.floor(Math.min(...values) / 5) * 5;
    const tickCount = 5;
    const step = (maxValue - minValue) / tickCount || 1;
    return Array.from({ length: tickCount + 1 }, (_, index) =>
      Number((minValue + step * index).toFixed(1)),
    );
  }, []);

  const handleDownloadGraph = useCallback(
    async (format: "png" | "gif") => {
      if (!svgRef.current) return;
      setDownloadError(null);
      setDownloadingFormat(format);

      try {
        const dataUrl = await exportSvgAsImage(svgRef.current, format);
        const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
        downloadDataUrl(
          dataUrl,
          `optimization-graph-${timestamp}.${format}`,
        );
      } catch (error) {
        console.error(error);
        if (
          error instanceof Error &&
          error.message === "GIF export is not supported by this browser"
        ) {
          setDownloadError(
            "GIF export is not supported in this browser. Please try PNG instead.",
          );
        } else {
          setDownloadError("Unable to download the graph. Please try again.");
        }
      } finally {
        setDownloadingFormat(null);
      }
    },
    [],
  );

  const handleGcodeDownload = useCallback(() => {
    const blob = new Blob([GCODE_PAYLOAD], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    downloadDataUrl(url, `optimized-job-${Date.now()}.gcode`);
    setTimeout(() => URL.revokeObjectURL(url), 1000);
  }, []);

  return (
    <div
      className={cn(
        "pointer-events-auto w-full max-w-5xl", // responsive container
        className,
      )}
    >
      <div className="rounded-3xl border border-border bg-background/95 shadow-2xl backdrop-blur-xl">
        <div className="flex items-start justify-between gap-4 border-b border-border/60 px-6 py-5">
          <div>
            <h2 className="text-xl font-semibold tracking-tight sm:text-2xl">
              Optimization results ready
            </h2>
            <p className="text-sm text-muted-foreground">
              Review the optimized setup, export the latest toolpath, and keep a
              copy of the performance plots.
            </p>
          </div>
          {onClose && (
            <Button
              aria-label="Close results panel"
              variant="ghost"
              size="icon"
              className="shrink-0"
              onClick={onClose}
            >
              <X className="h-4 w-4" />
            </Button>
          )}
        </div>

        <div className="grid gap-6 px-6 py-6 lg:grid-cols-[minmax(260px,1fr)_minmax(420px,1.4fr)]">
          <div className="space-y-6">
            <Card className="border-border/70">
              <CardHeader className="pb-4">
                <CardTitle className="text-lg font-semibold sm:text-xl">
                  Optimization setup
                </CardTitle>
                <CardDescription>
                  Final machine configuration used for this build.
                </CardDescription>
              </CardHeader>
              <CardContent className="px-0">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-1/2">Parameter</TableHead>
                      <TableHead className="w-1/2">Value</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {OPTIMIZATION_ROWS.map(row => (
                      <TableRow key={row.label}>
                        <TableCell className="font-medium text-muted-foreground">
                          {row.label}
                        </TableCell>
                        <TableCell className="text-foreground">
                          {row.value}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>

            <Card className="border-border/70">
              <CardHeader className="pb-4">
                <CardTitle className="text-lg font-semibold sm:text-xl">
                  Export G-code
                </CardTitle>
                <CardDescription>
                  Download the ready-to-print toolpath for your machine.
                </CardDescription>
              </CardHeader>
              <CardContent className="flex flex-col gap-3">
                <div className="rounded-xl border border-dashed border-border/70 bg-muted/40 px-4 py-3 text-sm text-muted-foreground">
                  Latest build: <span className="font-medium text-foreground">Material Test v5</span>
                  <br />
                  Generated {new Date().toLocaleString()}
                </div>
                <Button onClick={handleGcodeDownload} className="gap-2">
                  <FileDown className="h-4 w-4" />
                  Download optimized G-code
                </Button>
              </CardContent>
            </Card>
          </div>

          <Card className="border-border/70">
            <CardHeader className="flex flex-col gap-3 pb-4 md:flex-row md:items-center md:justify-between">
              <div>
                <CardTitle className="text-lg font-semibold sm:text-xl">
                  Process performance
                </CardTitle>
                <CardDescription>
                  Deposition rate and nozzle temperature across print layers.
                </CardDescription>
              </div>
              <div className="flex flex-wrap items-center gap-2">
                <Button
                  variant="secondary"
                  size="sm"
                  className="gap-2"
                  disabled={downloadingFormat !== null}
                  onClick={() => handleDownloadGraph("png")}
                >
                  <FileImage className="h-4 w-4" />
                  {downloadingFormat === "png" ? "Exporting…" : "Download PNG"}
                </Button>
                <Button
                  variant="secondary"
                  size="sm"
                  className="gap-2"
                  disabled={downloadingFormat !== null}
                  onClick={() => handleDownloadGraph("gif")}
                >
                  <Film className="h-4 w-4" />
                  {downloadingFormat === "gif" ? "Exporting…" : "Download GIF"}
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="rounded-2xl border border-border/60 bg-background p-4" role="img" aria-label="Optimization performance chart">
                <svg
                  ref={svgRef}
                  viewBox={`0 0 ${GRAPH_DIMENSIONS.width} ${GRAPH_DIMENSIONS.height}`}
                  className="w-full"
                >
                  <defs>
                    <linearGradient id="depositionGradient" x1="0" x2="0" y1="0" y2="1">
                      <stop offset="0%" stopColor="#2563eb" stopOpacity="0.4" />
                      <stop offset="100%" stopColor="#2563eb" stopOpacity="0.05" />
                    </linearGradient>
                    <linearGradient id="temperatureGradient" x1="0" x2="0" y1="0" y2="1">
                      <stop offset="0%" stopColor="#f97316" stopOpacity="0.35" />
                      <stop offset="100%" stopColor="#f97316" stopOpacity="0.05" />
                    </linearGradient>
                  </defs>

                  <g
                    transform={`translate(${GRAPH_DIMENSIONS.padding.left} ${GRAPH_DIMENSIONS.padding.top})`}
                  >
                    {axisTicks.map((tick, index) => {
                      const { height, padding } = GRAPH_DIMENSIONS;
                      const span = height - padding.top - padding.bottom;
                      const firstTick = axisTicks[0];
                      const lastTick =
                        axisTicks[axisTicks.length - 1] ?? firstTick;
                      const denominator = lastTick - firstTick || 1;
                      const relative = (tick - firstTick) / denominator;
                      const y = span - relative * span;
                      return (
                        <g key={`tick-${tick}-${index}`}>
                          <line
                            x1={0}
                            x2={GRAPH_DIMENSIONS.width - padding.right - padding.left}
                            y1={y}
                            y2={y}
                            stroke="rgba(148, 163, 184, 0.2)"
                            strokeWidth={1}
                          />
                          <text
                            x={-12}
                            y={y + 4}
                            textAnchor="end"
                            fontSize={12}
                            fill="var(--muted-foreground)"
                          >
                            {formatAxisLabel(tick)}
                          </text>
                        </g>
                      );
                    })}
                  </g>

                  <g>
                    <polyline
                      points={depositionPath}
                      fill="none"
                      stroke={GRAPH_COLORS.deposition}
                      strokeWidth={3}
                      strokeLinecap="round"
                    />
                    <polyline
                      points={temperaturePath}
                      fill="none"
                      stroke={GRAPH_COLORS.temperature}
                      strokeWidth={3}
                      strokeLinecap="round"
                    />
                    <polygon
                      points={depositionArea}
                      fill="url(#depositionGradient)"
                      opacity={0.35}
                    />
                    <polygon
                      points={temperatureArea}
                      fill="url(#temperatureGradient)"
                      opacity={0.3}
                    />
                  </g>

                  <g>
                    {OPTIMIZATION_RESULTS.map(point => {
                      const { width, height, padding } = GRAPH_DIMENSIONS;
                      const innerWidth = width - padding.left - padding.right;
                      const innerHeight = height - padding.top - padding.bottom;
                      const x =
                        padding.left +
                        (innerWidth * point.layer) /
                          Math.max(1, OPTIMIZATION_RESULTS.length - 1);

                      return (
                        <g key={`layer-${point.layer}`}>
                          <line
                            x1={x}
                            x2={x}
                            y1={height - padding.bottom}
                            y2={height - padding.bottom + 8}
                            stroke="var(--muted-foreground)"
                            strokeWidth={1}
                          />
                          <text
                            x={x}
                            y={height - padding.bottom + 24}
                            textAnchor="middle"
                            fontSize={12}
                            fill="var(--muted-foreground)"
                          >
                            L{point.layer}
                          </text>
                        </g>
                      );
                    })}
                  </g>
                </svg>
                <div className="mt-4 flex flex-wrap items-center gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <span
                      className="h-2.5 w-8 rounded-full"
                      style={{ backgroundColor: GRAPH_COLORS.deposition }}
                    />
                    Deposition rate (cm³/h)
                  </div>
                  <div className="flex items-center gap-2">
                    <span
                      className="h-2.5 w-8 rounded-full"
                      style={{ backgroundColor: GRAPH_COLORS.temperature }}
                    />
                    Nozzle temperature (°C)
                  </div>
                </div>
                {downloadError && (
                  <div className="mt-4 flex items-center gap-2 rounded-lg border border-destructive/40 bg-destructive/10 px-3 py-2 text-sm text-destructive">
                    <AlertCircle className="h-4 w-4" />
                    <span>{downloadError}</span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
